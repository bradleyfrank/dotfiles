#!/usr/bin/env bash

# @meta describe Renames media downloaded from torrents
# @meta author Brad Frank
# meta require-tools mnamer rsync uni2ascii


_title_parser() {
  local filename_normalized segments
  local -A title

  filename_normalized="$(echo "$1" \
    | tr '.' '_' \
    | tr ' ' '_' \
    | uni2ascii -Bq \
    | sed 's/[^a-zA-Z0-9_]//g' \
    | tr '[:lower:]' '[:upper:]' \
  )"

  segments="$(sed --regexp-extended --quiet \
    "s/^(.*)_((19|20)[0-9]{2})_([A-Z0-9_]*)(720|1080)P(.*)_(MKV|MP4)/\1\t\2\t\4/p" \
    <<< "$filename_normalized" \
    | sed -e 's/^_*//g' -e 's/_*$//g' \
    | sed 's/.*/\L&/; s/[a-z]*/\u&/g' \
  )"

  if [[ -z $segments ]]; then
    # if the regex fails 'segments' will probably be empty, so just
    # return the original filename (without the extension)
    basename -s ".${1##*.}" -- "$1"
    return 0
  fi

  title['name']="$(awk -F '\t' '{print $1}' <<< "$segments")"
  title['year']="$(awk -F '\t' '{print $2}' <<< "$segments")"
  title['edition']="$(awk -F '\t' '{print $3}' <<< "$segments" | tr '[:lower:]' '[:upper:]')"

  if [[ "${title['edition']}" != "" ]]; then
    title['edition']="$(sed \
      -e 's/OPEN_MATTE/IMAX/' \
      -e 's/_ANNIV_/_ANNIVERSARY_/' \
      <<< "${title['edition']}" \
    )"
    title['edition']=".{edition-${title['edition']}}"
  fi

  echo "${title['name']}.${title['year']}${title['edition']}"
}


_latin_to_ascii() {
  local dir; dir="$1"

  pushd "$dir" &> /dev/null || exit 1

  while read -r obj; do
    if [[ -d "$obj" ]]; then
      _latin_to_ascii "$obj"
    else
      new_filename="$(uni2ascii -Bq <<< "$(basename "$obj")")"
      mv --no-clobber "$obj" "./${new_filename// /_}"
    fi
  done < <(find . -mindepth 1 -maxdepth 1)

  popd &> /dev/null || exit 1
}


_movie_dir() {
  local mp4_file srt_file new_title dir; dir="$1"

  pushd "$dir" &> /dev/null || exit 1

  # collect all English SRT files and keep the largest (it should be the SDH version)
  find . -mindepth 2 -iname "*eng*.srt" -type f -exec mv --target-directory ./ -- {} \;
  find . -maxdepth 1 -type f -name '*.srt' -printf '%s\t%p\n' \
    | sort --numeric-sort \
    | head --lines -1 \
    | awk --field-separator '\t' '{print $2}' \
    | xargs --no-run-if-empty -I {} rm "{}"

  find . -mindepth 1 -maxdepth 1 -type d -exec rm -rf {} \;
  find . -mindepth 1 ! -name '*.srt' ! -name '*.mp4' -delete
  find . -type f -iname '*sample*.mp4' -delete

  mp4_file="$(find . -mindepth 1 -name '*.mp4')"
  srt_file="$(find . -mindepth 1 -name '*.srt')"

  new_title="$(_title_parser "$mp4_file")"

  mv "$mp4_file" "${new_title}.mp4"
  mv "$srt_file" "${new_title}.eng.srt"

  popd &> /dev/null || exit 1

  mv --no-clobber ./"$dir" "${new_title/{edition-*}./}"
}


# @cmd File renaming functions
rename() { :; }

# @cmd Rename movie files
# @option -d --dir <DIR+> Rename movie and subtitle files in specific directories
# @option -f --file <FILE+> Rename individual movie files
rename::movie() {
  local new_filename dir filename
  local -r yellow="\033[0;136m" blue="\033[0;33m" reset="\033[0m"

  if [[ -n $argc_dir ]]; then
    for dir in "${argc_dir[@]}"; do
      _movie_dir "$dir"
    done
  fi

  if [[ -n $argc_file ]]; then
    for filename in "${argc_file[@]}"; do
      new_filename="$(_title_parser "$filename").${filename##*.}"
      if [[ -e "$new_filename" ]]; then continue; fi
      echo -e "${yellow}${filename}${reset} ==> ${blue}${new_filename}${reset}"
      mv "$filename" "$new_filename"
    done
  fi

  find . -type f -name '.DS_Store' -delete
}

# @cmd Rename tv show files
# @option -d --dir! <DIR+>
rename::tv() {
  for dir in "${argc_dir[@]}"; do
    if [[ ! -d "$dir" ]]; then continue; fi
    pushd "$dir" &> /dev/null || exit 1
    mnamer ./* \
      --batch \
      --episode-directory "Season_{season:02}" \
      --episode-format "S{season:02}E{episode:02}.{title}{extension}"
    find . -mindepth 1 -type d -empty -delete
    _latin_to_ascii "$(pwd)"
    rename -z ./**/*
    popd &> /dev/null || exit 1
  done
}


# @cmd Upload movies to Plex
# @flag -r --remote Use remote connection to server
# @flag -x --delete Remove files/directories after uploading
# @flag -s --sort Auto sort movies into decade
# @option -f --file <FILE+> Upload specific files
# @option -d --dir <DIR+> Upload specific directories
upload() {
  local connection; connection="server"

  if [[ -n $argc_remote ]]; then
    connection="francopuccini"
  fi

  if [[ -z $argc_file && -z $argc_dir ]]; then
    echo "<FILE> or <DIR> required" >&2
    exit 1
  fi

  if [[ -n $argc_file ]]; then
    rsync --archive --info=progress2 "${argc_file[@]}" "${connection}:/data/media/upload/"
  fi

  if [[ -n $argc_dir ]]; then
    rsync --archive --info=progress2 "${argc_dir[@]%/}" "${connection}:/data/media/upload/"
  fi
}


# @cmd Sort media in the 'upload' directory into movie decade directory (server-side)
sort() {
  cd /data/media/movies || exit 1

  decade="$(date +%Y | cut --characters 1-3 | xargs -I {} echo "{} + 1" | bc)"
  year="$(find . -maxdepth 1 -mindepth 1 -type d -printf '%P\n' \
    | sort --numeric-sort \
    | head --lines 1 \
    | cut --characters 1-3 \
  )"

  cd /data/media/upload || exit 1

  while (( year < decade )); do
    find . -maxdepth 1 -regex ".*\.${year}[0-9]\(\..*\|$\)" -exec mv {} "../movies/${year}0/" \+
    year=$(( year+1 ))
  done
}

eval "$(argc --argc-eval "$0" "$@")"
