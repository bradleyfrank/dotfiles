#!/usr/bin/env bash

# @meta describe Renames media downloaded from torrents
# @meta author Brad Frank
# @meta require-tools mnamer
# @flag -d --debug


_title_parser() {
  local filename extension filename_normalized segments
  local -A title

  filename="$1"
  extension="${filename##*.}"

  filename_normalized="$(echo "$filename" \
    | tr '.' '_' \
    | tr ' ' '_' \
    | tr '[:lower:]' '[:upper:]' \
    | sed 's/[^a-zA-Z0-9_]//g' \
  )"

  segments="$(sed --regexp-extended --quiet \
    "s/^(.*)_((19|20)[0-9]{2})_([A-Z0-9_]*)(720|1080)P(.*)_(MKV|MP4)/\1\t\2\t\4/p" \
    <<< "$filename_normalized" \
    | sed -e 's/^_*//g' -e 's/_*$//g' \
    | sed 's/.*/\L&/; s/[a-z]*/\u&/g' \
  )"

  title['name']="$(awk -F '\t' '{print $1}' <<< "$segments")."
  title['year']="$(awk -F '\t' '{print $2}' <<< "$segments")."
  title['edition']="$(awk -F '\t' '{print $3}' <<< "$segments" | tr '[:lower:]' '[:upper:]')"

  if [[ "${title['edition']}" != "" ]]; then
    title['edition']="$(sed \
      -e 's/OPEN_MATTE/IMAX/' \
      -e 's/_ANNIV/_ANNIVERSARY/' \
      <<< "${title['edition']}" \
    )"
    title['edition']="{edition-${title['edition']}}."
  fi

  echo "${title['name']}${title['year']}${title['edition']}${extension}"
}


rarbg() {
  local new_title dir; dir="$1"

  pushd "$dir" &> /dev/null || exit 1

  if [[ -d Subs ]]; then
    find Subs/ -iname "*english*.srt" -type f -exec mv --target-directory ./ -- {} \;
  fi

  find . -mindepth 1 -maxdepth 1 -type d -exec rm -rf {} \;
  find . -mindepth 1 ! -name '*.srt' ! -name '*.mp4' -delete
  find . -type f -name '*.srt' -printf '%s\t%p\n' \
    | sort --numeric-sort \
    | head --lines -1 \
    | awk --field-separator '\t' '{print $2}' \
    | xargs --no-run-if-empty -I {} rm {} \;

  new_title="$(_title_parser "*.mp4")"

  mv "*.mp4" "${new_title}.mp4"
  mv "*.srt" "${new_title}.eng.srt"

  popd &> /dev/null || exit 1

  mv --no-clobber ./"$dir" "$(sed 's/{edition-.*}\.//g' <<< "$new_title")"
}


main() {
  local new_filename dir movie
  local -r yellow="\033[0;136m" blue="\033[0;33m" reset="\033[0m"

  if [[ -n $argc_debug ]]; then set -x; fi

  while read -r dir; do
    rarbg "$dir"
  done < <(find . -maxdepth 1 -name '*-RARBG' -type d)

  while read -r movie; do
    new_filename="$(_title_parser "$movie")"
    if [[ ! -e "$new_filename" ]]; then
      echo -e "${yellow}${movie}${reset} ==> ${blue}${new_filename}${reset}"
      mv "$movie" "$new_filename"
    fi
  done < <(find . -maxdepth 1 -type f \( -name '*.mkv' -o -name '*.mp4' \) -printf '%P\n')
}


tv_shows() {
  local dir; dir="$1"

  cd "$dir" || exit 1

  mnamer ./* \
    --batch \
    --episode-directory "${HOME}/Movies/Plex/tv_shows/{series}/Season_{season:02}" \
    --episode-format "S{season:02}E{episode:02}.{title}{extension}"
}


# @cmd Sort media in the 'upload' directory into movie decade directory (server-side)
sort() {
  cd /data/media/movies || exit 1

  decade="$(date +%Y | cut --characters 1-3 | xargs -I {} echo "{} + 1" | bc)"
  year="$(find . -maxdepth 1 -mindepth 1 -type d -printf '%P\n' \
    | sort --numeric-sort \
    | head --lines 1 \
    | cut --characters 1-3 \
  )"

  cd /data/media/upload || exit 1

  while (( year < decade )); do
    find . -maxdepth 1 -regex ".*\.${year}[0-9]\(\..*\|$\)" -exec mv {} "../movies/${year}0/" \+
    year=$(( year+1 ))
  done
}


eval "$(argc --argc-eval "$0" "$@")"
