#!/usr/bin/env bash

#
# Helper scripts for working with Google Cloud and Kubernetes.
# Author: Brad Frank
# Date: May 2024
# Tested: GNU bash, version 5.2.26(1)-release (aarch64-apple-darwin23.2.0)
# Requires: fzf
#


## ==============================================================================================
## Usage functions
## ----------------------------------------------------------------------------------------------


bcloud_usage() {
  case "$1" in
    kubeconfig)
      echo "bcloud kubeconfig [-a] [-p <projects>]"
      echo "  -r  Replace kubeconfig instead of append"
      echo "  -p  List of projects separated by commas"
      ;;
    *)
      echo "Helper scripts for working with Google Cloud and Kubernetes."
      echo
      echo "USAGE:"
      echo "  bcloud [-h] <subcommand> [-h | <flags>]"
      echo "    -h  Display this help message"
      echo
      echo "SUBCOMMANDS:"
      echo "  kubeconfig  Create a new branch as a new worktree"
      ;;
  esac
}


## ==============================================================================================
## Feature functions
## ----------------------------------------------------------------------------------------------


bcloud_kubeconfig () {
  local OPTIND projects project cluster append_config temp; append_config=1 temp="$(mktemp)"

  while getopts ':hrp:' flag; do
    case "$flag" in
      h) bcloud_usage "kubeconfig" ; exit 0 ;;
      r) unset append_config ;;
      p) projects="$OPTARG" ;;
      :) echo "Must supply an argument to -${OPTARG}." >&2; bcloud_usage "kubeconfig"; exit 1 ;;
     \?) echo "Invalid option: -${OPTARG}" >&2; bcloud_usage "kubeconfig"; exit 1 ;;
    esac
  done

  if [[ -n $projects ]]; then
    projects="$(tr ',' '\n' <<< "$projects")"
  else
    projects="$(gcloud projects list \
      --sort-by 'projectId' \
      --filter 'projectId !~ "^(sys|quickstart|test|gam)-.*" AND lifecycleState=ACTIVE' \
      --format 'value[separator=";"](projectId,name)' \
      | awk -F ';' '{print $1" ("$2")"}' \
      | fzf --multi
    )"
  fi

  KUBECONFIG="${KUBECONFIG:-"${HOME}/.kube/config"}"
  [[ -e $KUBECONFIG ]] && cp "$KUBECONFIG" "${KUBECONFIG}.$(date --iso-8601=seconds | tr -d ':-')"
  [[ -z $append_config ]] && rm -f "$KUBECONFIG"

  while read -r project; do
    projectId="$(awk -F ' ' '{print $1}' <<< "$project")"
    gcloud container clusters list \
      --project "$projectId" \
      --format="value[separator=' '](name,zone)" \
      | sed "s/^/${projectId} /g" \
      | awk '{print "("$1") " $2" "$1" "$3}' >> "$temp"
  done <<< "$projects"

  while read -r cluster; do
    name="$(awk '{print $2}' <<< "$cluster")"
    project="$(awk '{print $3}' <<< "$cluster")"
    location="$(awk '{print $4}' <<< "$cluster")"
    gcloud container clusters get-credentials "$name" --project "$project" --region "$location"
  done < <(fzf --multi --with-nth 2,1 < "$temp")

  rm "$temp"
}


## ==============================================================================================
## Main program
## ----------------------------------------------------------------------------------------------


main() {
  local OPTIND subcommand

  while getopts ":h" opt; do
    case "$opt" in
      h) bcloud_usage "$@"; exit 0 ;;
      *) echo "Invalid option: -${OPTARG}" >&2; echo >&2; bcloud_usage "$@"; exit 1 ;;
    esac
  done

  shift $((OPTIND-1)); subcommand="$1"; shift

  case "$subcommand" in
    kubeconfig) bcloud_kubeconfig "$@" ;;
             *) bcloud_usage "$@"      ;;
  esac
}

main "$@"
